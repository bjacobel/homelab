---
- name: Bring Pi-hole up
  community.docker.docker_compose:
    project_src: "{{ compose_project_dir }}"
    services: pihole
    state: present

- name: Populate FTL blocklist
  community.docker.docker_container_exec:
    container: pihole
    command: pihole -b -nr {{ blocked_domain }}
  loop: "{{ blocklist }}"
  loop_control:
    loop_var: blocked_domain
  register: ftl_result
  changed_when: '"Adding" in ftl_result.stdout'
  notify: Refresh pihole-FTL

- name: Populate FTL regex blocklist
  community.docker.docker_container_exec:
    container: pihole
    command: pihole -b -nr --regex {{ blocked_regex }}
  loop: "{{ regex_blocklist }}"
  loop_control:
    loop_var: blocked_regex
  register: ftl_result
  changed_when: '"Adding" in ftl_result.stdout'
  notify: Refresh pihole-FTL

- name: Populate FTL allowlist
  community.docker.docker_container_exec:
    container: pihole
    command: pihole -w -nr {{ allowed_domain }}
  loop: "{{ allowlist }}"
  loop_control:
    loop_var: allowed_domain
  register: ftl_result
  changed_when: '"Adding" in ftl_result.stdout'
  notify: Refresh pihole-FTL

- name: Get existing hosts lists from sql
  community.docker.docker_container_exec:
    container: pihole
    command: sqlite3 -cmd ".timeout 1000" /etc/pihole/gravity.db "select address from adlist where enabled = 1;"
  retries: 3
  register: hostslist_string
  changed_when: false

- name: Compare hosts list to one in vars and check different
  ansible.builtin.set_fact:
    cacheable: true
    needs_hosts_update: "{{ adhosts | symmetric_difference(hostslist_string.stdout.split('\n')) | length > 0 }}"

- name: Drop all existing gravity hosts
  when: ansible_facts['needs_hosts_update']
  community.docker.docker_container_exec:
    container: pihole
    command: sqlite3 -cmd ".timeout 1000" /etc/pihole/gravity.db "DELETE FROM adlist;"
  retries: 3
  notify: Reload gravity

- name: Add predefined hosts lists
  when: ansible_facts['needs_hosts_update']
  community.docker.docker_container_exec:
    container: pihole
    command: sqlite3 -cmd ".timeout 1000" /etc/pihole/gravity.db "INSERT INTO adlist(address, enabled, comment)
      SELECT '{{ adhost }}', 1, 'Managed by Ansible' WHERE NOT EXISTS(SELECT 1 FROM adlist WHERE enabled = 1 AND address = '{{ adhost }}');"
  loop: "{{ adhosts }}"
  loop_control:
    loop_var: adhost
  retries: 3
  notify: Reload gravity
