---
- name: If no connection, change user_name and password to defaults
  ansible.builtin.set_fact:
    # vagrant overrides this by setting ansible_user_first_run in vars because the username for that machine is "vagrant" (ofc)
    ansible_ssh_user: "{{ ansible_user_first_run | default('pi', True) }}"
    # vagrant will ignore this information because the ssh key is copied by the provisioner, and that is preferred
    # setting it for playbook runs against vagrant is harmless
    ansible_ssh_pass: raspberry

- name: Use the default insecure root password
  ansible.builtin.set_fact:
    ansible_become_pass: raspberry

- name: "Create new sudo user: {{ desired_new_user }}"
  become: true
  ansible.builtin.user:
    name: "{{ desired_new_user }}"
    password: "{{ desired_password | string | password_hash('sha256', 'salt', rounds=1000) }}"
    append: true
    shell: /bin/bash
    groups:
      - sudo

- name: Change the password for the root user
  become: true
  ansible.builtin.user:
    name: root
    password: "{{ desired_password | string | password_hash('sha256', 'salt', rounds=1000) }}"
  notify:
    - Logout

- name: Flush handlers
  meta: flush_handlers

- name: Edit sshd_config to enable pubkey auth
  become: true
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regex: ^(# *)?PubkeyAuthentication
    line: PubkeyAuthentication yes
  notify:
    - Restart ssh service
    - Logout

- name: Enumerate control node ssh keys
  delegate_to: localhost
  stat:
    path: ~/.ssh/id_{{ item }}
  register: key_stats
  loop:
    - ed25519
    - rsa

- name: Determine if any ssh keys exist
  ansible.builtin.set_fact:
    has_ssh_key: "{{ key_stats.results | selectattr('stat.exists', 'equalto', true) | length > 0 }}"

- name: Choose best ssh key
  ansible.builtin.set_fact:
    control_node_sshkey: "{{ key_stats.results | selectattr('stat.exists', 'equalto', true) | map(attribute='stat.path') | first }}"
  when: has_ssh_key

- name: Create an ed25519 ssh key on the control node
  delegate_to: localhost
  community.crypto.openssh_keypair:
    path: ~/.ssh/id_ed25519
    regenerate: never
    type: ed25519
    mode: "600"
  when: not has_ssh_key
  register: created_ssh_key

- name: Set ssh key to the one we just created
  ansible.builtin.set_fact:
    control_node_sshkey: "{{ created_ssh_key.filename }}"
  when: not has_ssh_key

- name: Add the control node's ssh key to authorized_keys for {{ desired_new_user }}
  become: true
  become_user: "{{ desired_new_user }}"
  ansible.posix.authorized_key:
    user: "{{ desired_new_user }}"
    key: "{{ lookup('file', control_node_sshkey + '.pub') }}"
    state: present
  notify:
    - Restart ssh service
    - Logout

- name: Use this ssh key for future auth
  ansible.builtin.set_fact:
    ansible_ssh_private_key_file: "{{ control_node_sshkey }}"
  notify:
    - Logout

- name: Use the new root password from here on out
  ansible.builtin.set_fact:
    ansible_become_pass: "{{ desired_password }}"
    no_log: true
