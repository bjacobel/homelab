---
- name: Gather facts
  tags: always
  when: (ansible_run_tags == ['all']) or (ansible_run_tags | length)
  setup:

- name: Create compose project directory
  file:
    path: "{{ compose_project_dir }}"
    state: directory
    mode: 0755

- name: Install docker compose and deps
  become: true
  apt:
    name: "{{item}}"
    state: present
  loop:
    - docker-compose-plugin
    - python3-pexpect

- name: Get current docker volumes
  command: docker volume ls --format='{% raw %}{{.Name}}{% endraw %}' # noqa jinja[spacing]
  register: current_volumes
  changed_when: false

- name: Get requested persistent volumes in compose file
  ansible.builtin.set_fact:
    requested_volumes: "{{ lookup('template', './docker-compose.yml.j2') | from_yaml | json_query('volumes') | list }}"

# TODO: this will try to recreate ALL volumes, not just `external: true` ones
- name: Create volumes if they don't exist
  command: docker volume create {{ volume }}
  loop: "{{ requested_volumes | difference(current_volumes.stdout.split('\n')) }}"
  loop_control:
    loop_var: volume
  register: vol_create
  changed_when: vol_create.stdout == volume

- name: Template docker-compose.yml to ~/
  ansible.builtin.template:
    src: ./templates/docker-compose.yml.j2
    dest: "{{ compose_project_dir }}/docker-compose.yml"
    mode: "0644"
  diff: true
  when: (ansible_run_tags == ['all']) or (ansible_run_tags | intersect(compose_services | map(attribute='name')) | length)
  tags: always

- name: Determine services that need file-based or shell-involved config
  ansible.builtin.set_fact:
    role_config_required: "{{ compose_services | selectattr('role_config', 'defined') | map(attribute='name') }}"
  tags: always

- name: "Run config role for extra-config service: {{ role }}"
  include_role:
    name: "{{ role }}"
  loop: "{{ role_config_required }}"
  loop_control:
    loop_var: role
  when: (ansible_run_tags == ['all']) or (role in ansible_run_tags)
  tags: always

- name: Start services using Compose if not started already
  community.docker.docker_compose_v2:
    project_src: "{{ compose_project_dir }}"
    state: present
